name: Release Template

on:
  workflow_call:
    inputs:
      owner:
        required: true
        type: string
      repository:
        required: true
        type: string
      release_version:
        required: true
        type: string
      next_development_version:
        required: true
        type: string
      jreleaser_file:
        required: true
        type: string
      skip_maven_release:
        description: If "true" we won't execute "mvn deploy" but just "mvn install" to avoid releasing to Maven Central
        required: false
        default: false
        type: boolean
      before_script:
        description: Script to run before release
        required: false
        default: |
          echo "Nothing to do"
        type: string
      after_script:
        description: Script to run after release
        required: false
        default: |
          echo "Nothing to do"
        type: string
      cache_key:
        description: The cache key to restore after java-setup
        required: true
        type: string
      cache_key_to_restore:
        description: The cache key to create after post java-setup
        required: true
        type: string
    secrets:
      GITHUB_PAT:
        required: true
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD:
        required: true
      GPG_PRIVATE_KEY:
        required: true
      GPG_PASSPHRASE:
        required: true

jobs:
  before:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repository }}
          token: ${{ secrets.GH_PAT }}
      - name: Executing script
        run: ${{ inputs.before_script }}
        env:
          RELEASE_VERSION: ${{ inputs.release_version }}
          NEXT_VERSION: ${{ inputs.release_version }}
      - name: Commit and Push
        uses: ${{ inputs.owner }}/windup-pipelines/actions/commit@main
        with:
          commit_message: "Preparing for release"

  release:
    needs: [ before ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CI
        uses: actions/checkout@v3
        with:
          path: ci
      - name: Checkout ${{ inputs.repository }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repository }}
          path: repository
          fetch-depth: 0
          token: ${{ secrets.GITHUB_PAT }}
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 11
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ inputs.cache_key }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ inputs.cache_key_to_restore }}-${{ github.run_id }}
      - name: Set release version ${{ inputs.release_version }}
        run: |
          export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)
          source ci/scripts/utils.sh
          cd repository && setReleaseVersion
        env:
          NEXT_VERSION: ${{ inputs.release_version }}
      - name: Commit and Push
        uses: ${{ inputs.owner }}/windup-pipelines/actions/commit@main
        with:
          working-directory: repository
          commit_message: "üèÅ Releasing version ${{ inputs.release_version }}"
      - name: Maven install
        # if: ${{ inputs.skip_maven_release == true }}
        run: |
          export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)          
          cd repository && mvn install -DskipTests -s $SETTINGS_XML
      # - name: Release to OSSRH
      #   if: ${{ inputs.skip_maven_release != true }}
      #   run: |
      #     export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)
      #     export GPG_SCRIPT=$(readlink -f ci/scripts/gpghack.sh)
      #     source ci/scripts/utils.sh
      #     cd repository && release
      #   env:
      #     MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      #     MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      #     MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Setup JReleaser
        run: |
          cp ci/${{ inputs.jreleaser_file }} repository/jreleaser.yml
      - name: JReleaser
        uses: jreleaser/release-action@v2
        with:
          working-directory: repository
          arguments: full-release
          java-opts: -Xms1024M -Xmx2048M
        env:
          JRELEASER_PROJECT_VERSION: ${{ inputs.release_version }}
          JRELEASER_TAG_NAME: ${{ inputs.release_version }}
          JRELEASER_PRERELEASE_PATTERN: "*.Alpha*"
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_PAT }}
      - name: JReleaser - generate log
        if: always()
        working-directory: repository
        run: tar -czvf jreleaser-log.tgz out/
      - name: JReleaser - upload log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.repository }}-jreleaser-log
          path: "repository/jreleaser-log.tgz"

  after:
    needs: [ release ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repository }}
          token: ${{ secrets.GH_PAT }}
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 11
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ inputs.cache_key }}-${{ github.run_id }}-after
          restore-keys: |
            ${{ runner.os }}-maven-${{ inputs.cache_key_to_restore }}-${{ github.run_id }}
      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAYIO_USERNAME }}
          password: ${{ secrets.QUAYIO_PASSWORD }}

      - name: Executing script
        run: ${{ inputs.after_script }}
        env:
          RELEASE_VERSION: ${{ inputs.release_version }}
          NEXT_VERSION: ${{ inputs.release_version }}

      - name: Set next development version ${{ inputs.next_development_version }}
        run: |
          export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)
          source ci/scripts/utils.sh
          cd repository && setNextDevelopmentVersion
        env:
          NEXT_VERSION: ${{ inputs.next_development_version }}
      - name: Commit and Push
        uses: ${{ inputs.owner }}/windup-pipelines/actions/commit@main
        with:
          working-directory: repository
          commit_message: "‚¨ÜÔ∏è  Next version ${{ inputs.next_development_version }}"
